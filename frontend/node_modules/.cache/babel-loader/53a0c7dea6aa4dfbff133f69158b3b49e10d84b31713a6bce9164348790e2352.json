{"ast":null,"code":"var _jsxFileName = \"/Users/seanlongdale/Development/code/phase-3/phase-3-project/frontend/phase-3-frontend/src/Exercise.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Exercise() {\n  function metricCheck(exercise) {\n    let metric;\n    if (exercise.for_reps) {\n      metric = \"reps\";\n    } else if (exercise.for_time) {\n      metric = \"mins\";\n    } else {\n      metric = \"lbs\";\n    }\n    return metric;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: exercises.exercises.map(exercise => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: exercise.exercise\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", metricCheck(exercise)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this))\n  }, void 0, false);\n}\n_c = Exercise;\nexport default Exercise;\nvar _c;\n$RefreshReg$(_c, \"Exercise\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Exercise","metricCheck","exercise","metric","for_reps","for_time","children","exercises","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanlongdale/Development/code/phase-3/phase-3-project/frontend/phase-3-frontend/src/Exercise.js"],"sourcesContent":["import React from \"react\";\n\nfunction Exercise (){\n\n    function metricCheck (exercise) {\n        let metric\n        if (exercise.for_reps){\n            metric = \"reps\"\n        } else if (exercise.for_time){\n            metric = \"mins\"\n        } else {\n            metric = \"lbs\"\n        }\n        return metric\n    }\n\n    return(\n        <>\n        {exercises.exercises.map((exercise) => (\n            <li>\n                <span>{exercise.exercise}</span>\n                <span> {metricCheck(exercise)}</span>\n            </li>\n            ))}\n        </>\n    )\n}\n\nexport default Exercise;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,QAAQA,CAAA,EAAG;EAEhB,SAASC,WAAWA,CAAEC,QAAQ,EAAE;IAC5B,IAAIC,MAAM;IACV,IAAID,QAAQ,CAACE,QAAQ,EAAC;MAClBD,MAAM,GAAG,MAAM;IACnB,CAAC,MAAM,IAAID,QAAQ,CAACG,QAAQ,EAAC;MACzBF,MAAM,GAAG,MAAM;IACnB,CAAC,MAAM;MACHA,MAAM,GAAG,KAAK;IAClB;IACA,OAAOA,MAAM;EACjB;EAEA,oBACIN,OAAA,CAAAE,SAAA;IAAAO,QAAA,EACCC,SAAS,CAACA,SAAS,CAACC,GAAG,CAAEN,QAAQ,iBAC9BL,OAAA;MAAAS,QAAA,gBACIT,OAAA;QAAAS,QAAA,EAAOJ,QAAQ,CAACA;MAAQ;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eAChCf,OAAA;QAAAS,QAAA,GAAM,GAAC,EAACL,WAAW,CAACC,QAAQ,CAAC;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAExC;EAAC,iBACH;AAEX;AAACC,EAAA,GAxBQb,QAAQ;AA0BjB,eAAeA,QAAQ;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}